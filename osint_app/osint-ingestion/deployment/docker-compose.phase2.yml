version: '3.8'

services:
  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: osint_db
      POSTGRES_USER: osint_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_EXTENSIONS: vector
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U osint_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and job queuing
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Main OSINT ingestion service with Phase 2 features
  osint-ingestion:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.phase2
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://osint_user:${POSTGRES_PASSWORD}@postgres:5432/osint_db
      REDIS_URL: redis://redis:6379
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      # Phase 2 specific
      ENABLE_BIAS_DETECTION: "true"
      ENABLE_ENTITY_LINKING: "true"
      ENABLE_MULTILINGUAL: "true"
      ENABLE_TIMELINE_SYNTHESIS: "true"
      # Model paths
      SENTENCE_TRANSFORMERS_HOME: /app/data/models
      TRANSFORMERS_CACHE: /app/data/models
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Analytics API service
  analytics-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.phase2
    command: ["node", "api/server.js"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://osint_user:${POSTGRES_PASSWORD}@postgres:5432/osint_db
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      PORT: 3001
    depends_on:
      - postgres
      - osint-ingestion
    ports:
      - "3001:3001"
    restart: unless-stopped

  # Background job processor for heavy tasks
  job-processor:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.phase2
    command: ["node", "workers/jobProcessor.js"]
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://osint_user:${POSTGRES_PASSWORD}@postgres:5432/osint_db
      REDIS_URL: redis://redis:6379
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Process heavy ML tasks
      PROCESS_EMBEDDINGS: "true"
      PROCESS_ENTITY_LINKING: "true"
      PROCESS_TIMELINE_SYNTHESIS: "true"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1.5G

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - osint-ingestion
      - analytics-api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: osint-network